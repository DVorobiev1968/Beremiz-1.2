#include "beremiz.h"
#ifndef __POUS_H
#define __POUS_H

#include "accessor.h"
#include "iec_std_lib.h"

__DECLARE_ENUMERATED_TYPE(LOGLEVEL,
  LOGLEVEL__CRITICAL,
  LOGLEVEL__WARNING,
  LOGLEVEL__INFO,
  LOGLEVEL__DEBUG
)
__DECLARE_STRUCT_TYPE(DATATYPE0,
  STRING _1NJ20T001;
    STRING _1CV20T001;
    STRING RASHOD_1;
    STRING RASHOD_2;
    STRING PID_1;
    STRING PID_2;
    STRING PID_3;
    STRING IN;
    STRING OUT;
    STRING IBM;
    STRING AMPER;
    STRING AMPER_A;
    STRING AMPER_B;
    STRING AMPER_C;
  )
__DECLARE_ENUMERATED_TYPE(STATEMACHINE,
  STATEMACHINE__STANDBY,
  STATEMACHINE__START,
  STATEMACHINE__STOP
)
// FUNCTION_BLOCK LOGGER
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,MSG)
  __DECLARE_VAR(LOGLEVEL,LEVEL)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,TRIG0)

} LOGGER;

void LOGGER_init__(LOGGER *data__, BOOL retain);
// Code part
void LOGGER_body__(LOGGER *data__);
// FUNCTION_BLOCK PYTHON_EVAL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,STATE)
  __DECLARE_VAR(STRING,BUFFER)
  __DECLARE_VAR(STRING,PREBUFFER)
  __DECLARE_VAR(BOOL,TRIGM1)
  __DECLARE_VAR(BOOL,TRIGGED)

} PYTHON_EVAL;

void PYTHON_EVAL_init__(PYTHON_EVAL *data__, BOOL retain);
// Code part
void PYTHON_EVAL_body__(PYTHON_EVAL *data__);
// FUNCTION_BLOCK PYTHON_POLL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(DWORD,STATE)
  __DECLARE_VAR(STRING,BUFFER)
  __DECLARE_VAR(STRING,PREBUFFER)
  __DECLARE_VAR(BOOL,TRIGM1)
  __DECLARE_VAR(BOOL,TRIGGED)

} PYTHON_POLL;

void PYTHON_POLL_init__(PYTHON_POLL *data__, BOOL retain);
// Code part
void PYTHON_POLL_body__(PYTHON_POLL *data__);
// FUNCTION_BLOCK PYTHON_GEAR
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(UINT,N)
  __DECLARE_VAR(BOOL,TRIG)
  __DECLARE_VAR(STRING,CODE)
  __DECLARE_VAR(BOOL,ACK)
  __DECLARE_VAR(STRING,RESULT)

  // FB private variables - TEMP, private and located variables
  PYTHON_EVAL PY_EVAL;
  __DECLARE_VAR(UINT,COUNTER)
  __DECLARE_VAR(UINT,ADD10_OUT)
  __DECLARE_VAR(BOOL,EQ13_OUT)
  __DECLARE_VAR(UINT,SEL15_OUT)
  __DECLARE_VAR(BOOL,AND7_OUT)

} PYTHON_GEAR;

void PYTHON_GEAR_init__(PYTHON_GEAR *data__, BOOL retain);
// Code part
void PYTHON_GEAR_body__(PYTHON_GEAR *data__);
// FUNCTION_BLOCK GETBOOLSTRING
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(BOOL,VALUE)
  __DECLARE_VAR(STRING,CODE)

  // FB private variables - TEMP, private and located variables

} GETBOOLSTRING;

void GETBOOLSTRING_init__(GETBOOLSTRING *data__, BOOL retain);
// Code part
void GETBOOLSTRING_body__(GETBOOLSTRING *data__);
// FUNCTION_BLOCK BUTTON
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(STRING,BACK_ID)
  __DECLARE_VAR(STRING,SELE_ID)
  __DECLARE_VAR(BOOL,TOGGLE)
  __DECLARE_VAR(BOOL,SET_STATE)
  __DECLARE_VAR(BOOL,STATE_IN)
  __DECLARE_VAR(BOOL,STATE_OUT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(STRING,ID)
  PYTHON_EVAL INIT_COMMAND;
  GETBOOLSTRING GETBUTTONSTATE;
  PYTHON_EVAL SETSTATE_COMMAND;
  PYTHON_POLL GETSTATE_COMMAND;
  GETBOOLSTRING GETBUTTONTOGGLE;
  __DECLARE_VAR(STRING,CONCAT2_OUT)
  __DECLARE_VAR(STRING,CONCAT22_OUT)
  __DECLARE_VAR(INT,STRING_TO_INT25_OUT)
  __DECLARE_VAR(BOOL,INT_TO_BOOL26_OUT)
  __DECLARE_VAR(BOOL,AND31_OUT)
  __DECLARE_VAR(STRING,CONCAT7_OUT)

} BUTTON;

void BUTTON_init__(BUTTON *data__, BOOL retain);
// Code part
void BUTTON_body__(BUTTON *data__);
// FUNCTION_BLOCK LED
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(STRING,BACK_ID)
  __DECLARE_VAR(STRING,SELE_ID)
  __DECLARE_VAR(BOOL,STATE_IN)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(STRING,ID)
  PYTHON_EVAL INIT_COMMAND;
  PYTHON_POLL SETSTATE_COMMAND;
  GETBOOLSTRING GETLEDSTATE;
  __DECLARE_VAR(STRING,CONCAT2_OUT)
  __DECLARE_VAR(STRING,CONCAT7_OUT)

} LED;

void LED_init__(LED *data__, BOOL retain);
// Code part
void LED_body__(LED *data__);
// FUNCTION_BLOCK TEXTCTRL
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(STRING,BACK_ID)
  __DECLARE_VAR(BOOL,SET_TEXT)
  __DECLARE_VAR(STRING,TEXT)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(STRING,ID)
  PYTHON_EVAL SVGUI_TEXTCTRL;
  PYTHON_EVAL SETSTATE_COMMAND;
  __DECLARE_VAR(STRING,CONCAT1_OUT)
  __DECLARE_VAR(BOOL,AND31_OUT)
  __DECLARE_VAR(STRING,CONCAT12_OUT)

} TEXTCTRL;

void TEXTCTRL_init__(TEXTCTRL *data__, BOOL retain);
// Code part
void TEXTCTRL_body__(TEXTCTRL *data__);
// FUNCTION
STRING WRITESIGNALCSV(
  BOOL EN, 
  BOOL *__ENO, 
  STRING NAMEFILE);
// FUNCTION
STRING OPENCSV(
  BOOL EN, 
  BOOL *__ENO, 
  STRING ARG);
// FUNCTION
STRING READSIGNAL(
  BOOL EN, 
  BOOL *__ENO, 
  STRING ARG);
// FUNCTION_BLOCK SOURCEFROMFILE
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(STRING,NAMEFILEFB)
  __DECLARE_VAR(REAL,VALUE_OUTFB)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGGER)
  PYTHON_EVAL PYTHON_EVAL0;
  __DECLARE_VAR(STRING,STR_FUNC)
  __DECLARE_VAR(BOOL,NOT2_OUT)
  __DECLARE_VAR(STRING,READSIGNAL11_OUT)
  __DECLARE_VAR(REAL,STRING_TO_REAL5_OUT)

} SOURCEFROMFILE;

void SOURCEFROMFILE_init__(SOURCEFROMFILE *data__, BOOL retain);
// Code part
void SOURCEFROMFILE_body__(SOURCEFROMFILE *data__);
// PROGRAM DG
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  SOURCEFROMFILE SOURCEFROMFILE0;
  SOURCEFROMFILE SOURCEFROMFILE1;
  __DECLARE_VAR(DATATYPE0,IN1)
  __DECLARE_VAR(DATATYPE0,IN2)
  __DECLARE_VAR(INT,EXP_IN)
  __DECLARE_VAR(REAL,VAL_OUT)
  __DECLARE_VAR(REAL,RASHOD_1_IN)
  __DECLARE_VAR(REAL,RASHOD_2_IN)
  __DECLARE_VAR(REAL,SQRT5_OUT)
  __DECLARE_VAR(REAL,EXPT6_OUT)
  __DECLARE_VAR(REAL,ADD8_OUT)

} DG;

void DG_init__(DG *data__, BOOL retain);
// Code part
void DG_body__(DG *data__);
// PROGRAM TESTSOURCEFROMFILE
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(STRING,NAMEFILE)
  __DECLARE_VAR(REAL,VALUE_1)

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_VAR(DATATYPE0,NAMEFILEDATATYPE)
  __DECLARE_EXTERNAL(REAL,VALUEOUT)
  SOURCEFROMFILE SOURCEFROMFILE0;
  SOURCEFROMFILE SOURCEFROMFILE1;
  SOURCEFROMFILE SOURCEFROMFILE2;
  __DECLARE_VAR(REAL,ADD7_OUT)

} TESTSOURCEFROMFILE;

void TESTSOURCEFROMFILE_init__(TESTSOURCEFROMFILE *data__, BOOL retain);
// Code part
void TESTSOURCEFROMFILE_body__(TESTSOURCEFROMFILE *data__);
// FUNCTION
STRING GET_VAL_ROW(
  BOOL EN, 
  BOOL *__ENO, 
  STRING NAMEFILE, 
  STRING NAMEFIELD);
// FUNCTION_BLOCK GET_VALUE_CSV
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(STRING,NAMEFILE)
  __DECLARE_VAR(STRING,NAMEFIELD)
  __DECLARE_VAR(REAL,VALUE_OUTFB)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGGER)
  PYTHON_EVAL PYTHON_EVAL0;
  __DECLARE_VAR(BOOL,NOT2_OUT)
  __DECLARE_VAR(STRING,GET_VAL_ROW15_OUT)
  __DECLARE_VAR(REAL,STRING_TO_REAL5_OUT)

} GET_VALUE_CSV;

void GET_VALUE_CSV_init__(GET_VALUE_CSV *data__, BOOL retain);
// Code part
void GET_VALUE_CSV_body__(GET_VALUE_CSV *data__);
// FUNCTION
STRING READSIGNALCSV(
  BOOL EN, 
  BOOL *__ENO, 
  STRING NAMEFILE, 
  STRING I_STATUS);
// FUNCTION_BLOCK SOURCEFROMFILECSV
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(STRING,NAMEFILEFB)
  __DECLARE_VAR(INT,I_STATUS_READSIGNAL_CSV)
  __DECLARE_VAR(INT,I_STATUS_WRITESIGNAL_CSV)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGGER)
  __DECLARE_VAR(BOOL,PYTRIGGEROPENCSV)
  PYTHON_EVAL PYTHON_EVAL0;
  __DECLARE_VAR(STRING,STR_FUNC)
  PYTHON_EVAL PYTHON_EVAL1;
  PYTHON_EVAL PYTHON_EVAL2;
  __DECLARE_VAR(STRING,CON_WRITECSV)
  __DECLARE_VAR(BOOL,NOT2_OUT)
  __DECLARE_VAR(STRING,OPENCSV18_OUT)
  __DECLARE_VAR(STRING,READSIGNALCSV24_OUT)
  __DECLARE_VAR(INT,STRING_TO_INT21_OUT)
  __DECLARE_VAR(STRING,WRITESIGNALCSV26_OUT)
  __DECLARE_VAR(INT,STRING_TO_INT29_OUT)

} SOURCEFROMFILECSV;

void SOURCEFROMFILECSV_init__(SOURCEFROMFILECSV *data__, BOOL retain);
// Code part
void SOURCEFROMFILECSV_body__(SOURCEFROMFILECSV *data__);
// FUNCTION
STRING SET_VAL_ROW(
  BOOL EN, 
  BOOL *__ENO, 
  STRING NAMEFILE, 
  STRING NAMEFIELD, 
  REAL VALUE);
// FUNCTION_BLOCK SET_VALUE_CSV
// Data part
typedef struct {
  // FB Interface - IN, OUT, IN_OUT variables
  __DECLARE_VAR(BOOL,EN)
  __DECLARE_VAR(BOOL,ENO)
  __DECLARE_VAR(STRING,NAMEFILE)
  __DECLARE_VAR(STRING,NAMEFIELD)
  __DECLARE_VAR(INT,I_STATUS)
  __DECLARE_VAR(REAL,VALUE_IN)

  // FB private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGGER)
  PYTHON_EVAL PYTHON_EVAL0;
  __DECLARE_VAR(BOOL,NOT2_OUT)
  __DECLARE_VAR(STRING,SET_VAL_ROW17_OUT)
  __DECLARE_VAR(INT,STRING_TO_INT19_OUT)

} SET_VALUE_CSV;

void SET_VALUE_CSV_init__(SET_VALUE_CSV *data__, BOOL retain);
// Code part
void SET_VALUE_CSV_body__(SET_VALUE_CSV *data__);
// PROGRAM TESTCSV
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGER)
  __DECLARE_VAR(DATATYPE0,TAGS)
  __DECLARE_VAR(STRING,RESULT)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV1)
  __DECLARE_VAR(INT,I_STATUS_WRITE_CSV)
  __DECLARE_VAR(INT,I_STATUS_OPEN_CSV)
  __DECLARE_VAR(REAL,VAL_OUT_1)
  __DECLARE_VAR(REAL,VAL_OUT_2)
  __DECLARE_VAR(REAL,VAL_OUT_3)
  __DECLARE_VAR(REAL,VAL_OUT_4)
  __DECLARE_VAR(REAL,VAL_OUT_5)
  __DECLARE_VAR(REAL,VAL_OUT_6)
  __DECLARE_VAR(REAL,VAL_OUT_7)
  __DECLARE_VAR(REAL,VAL_OUT_8)
  __DECLARE_VAR(REAL,VAL_OUT_9)
  __DECLARE_VAR(REAL,VAL_OUT_10)
  __DECLARE_VAR(REAL,VAL_OUT_12)
  __DECLARE_VAR(DATATYPE0,VAL_IN)
  GET_VALUE_CSV GET_VALUE_CSV0;
  GET_VALUE_CSV GET_VALUE_CSV1;
  SOURCEFROMFILECSV SOURCEFROMFILECSV0;
  SOURCEFROMFILECSV SOURCEFROMFILECSV1;
  GET_VALUE_CSV GET_VALUE_CSV2;
  GET_VALUE_CSV GET_VALUE_CSV3;
  SET_VALUE_CSV SET_VALUE_CSV0;
  SET_VALUE_CSV SET_VALUE_CSV1;
  SET_VALUE_CSV SET_VALUE_CSV2;
  SET_VALUE_CSV SET_VALUE_CSV3;
  __DECLARE_VAR(REAL,MUL31_OUT)
  __DECLARE_VAR(REAL,ADD29_OUT)

} TESTCSV;

void TESTCSV_init__(TESTCSV *data__, BOOL retain);
// Code part
void TESTCSV_body__(TESTCSV *data__);
// PROGRAM TESTCSV_V_1
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGER)
  __DECLARE_VAR(DATATYPE0,TAGS)
  __DECLARE_VAR(STRING,RESULT)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV1)
  __DECLARE_VAR(INT,I_STATUS_WRITE_CSV)
  __DECLARE_VAR(INT,I_STATUS_OPEN_CSV)
  __DECLARE_VAR(REAL,VAL_OUT_1)
  __DECLARE_VAR(REAL,VAL_OUT_2)
  __DECLARE_VAR(REAL,VAL_OUT_3)
  __DECLARE_VAR(REAL,VAL_OUT_4)
  __DECLARE_VAR(REAL,VAL_OUT_5)
  __DECLARE_VAR(REAL,VAL_OUT_6)
  __DECLARE_VAR(REAL,VAL_OUT_7)
  __DECLARE_VAR(REAL,VAL_OUT_8)
  __DECLARE_VAR(REAL,VAL_OUT_9)
  __DECLARE_VAR(REAL,VAL_OUT_10)
  __DECLARE_VAR(DATATYPE0,VAL_IN)
  GET_VALUE_CSV GET_VALUE_CSV0;
  GET_VALUE_CSV GET_VALUE_CSV1;
  SOURCEFROMFILECSV SOURCEFROMFILECSV0;
  SOURCEFROMFILECSV SOURCEFROMFILECSV1;
  GET_VALUE_CSV GET_VALUE_CSV2;
  GET_VALUE_CSV GET_VALUE_CSV3;
  SET_VALUE_CSV SET_VALUE_CSV0;
  SET_VALUE_CSV SET_VALUE_CSV1;
  SET_VALUE_CSV SET_VALUE_CSV2;
  SET_VALUE_CSV SET_VALUE_CSV3;
  SET_VALUE_CSV SET_VALUE_CSV4;
  SET_VALUE_CSV SET_VALUE_CSV5;
  __DECLARE_VAR(REAL,MUL31_OUT)
  __DECLARE_VAR(REAL,ADD29_OUT)

} TESTCSV_V_1;

void TESTCSV_V_1_init__(TESTCSV_V_1 *data__, BOOL retain);
// Code part
void TESTCSV_V_1_body__(TESTCSV_V_1 *data__);
// PROGRAM TESTCSV_V_3
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGER)
  __DECLARE_VAR(DATATYPE0,TAGS)
  __DECLARE_VAR(STRING,RESULT)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV1)
  __DECLARE_VAR(INT,I_STATUS_WRITE_CSV)
  __DECLARE_VAR(INT,I_STATUS_OPEN_CSV)
  __DECLARE_VAR(REAL,VAL_OUT_1)
  __DECLARE_VAR(REAL,VAL_OUT_2)
  __DECLARE_VAR(REAL,VAL_OUT_3)
  __DECLARE_VAR(DATATYPE0,VAL_IN)
  SOURCEFROMFILECSV SOURCEFROMFILECSV0;
  GET_VALUE_CSV GET_VALUE_CSV0;
  GET_VALUE_CSV GET_VALUE_CSV1;
  SET_VALUE_CSV SET_VALUE_CSV0;
  SET_VALUE_CSV SET_VALUE_CSV1;
  SET_VALUE_CSV SET_VALUE_CSV2;
  INTEGRAL INTEGRAL0;
  __DECLARE_VAR(BOOL,RUN)
  __DECLARE_VAR(STRING,CYCLE)
  __DECLARE_VAR(BOOL,TRIGER)
  __DECLARE_VAR(BOOL,NOT22_OUT)
  __DECLARE_VAR(TIME,STRING_TO_TIME23_OUT)

} TESTCSV_V_3;

void TESTCSV_V_3_init__(TESTCSV_V_3 *data__, BOOL retain);
// Code part
void TESTCSV_V_3_body__(TESTCSV_V_3 *data__);
// PROGRAM TESTCSV_V_2
// Data part
typedef struct {
  // PROGRAM Interface - IN, OUT, IN_OUT variables

  // PROGRAM private variables - TEMP, private and located variables
  __DECLARE_VAR(BOOL,PYTRIGER)
  __DECLARE_VAR(DATATYPE0,TAGS)
  __DECLARE_VAR(STRING,RESULT)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV)
  __DECLARE_VAR(INT,I_STATUS_READ_CSV1)
  __DECLARE_VAR(INT,I_STATUS_WRITE_CSV)
  __DECLARE_VAR(INT,I_STATUS_OPEN_CSV)
  __DECLARE_VAR(REAL,VAL_OUT_1)
  __DECLARE_VAR(REAL,VAL_OUT_2)
  __DECLARE_VAR(REAL,VAL_OUT_3)
  __DECLARE_VAR(REAL,VAL_OUT_4)
  __DECLARE_VAR(REAL,VAL_OUT_5)
  __DECLARE_VAR(REAL,VAL_OUT_6)
  __DECLARE_VAR(REAL,VAL_OUT_7)
  __DECLARE_VAR(REAL,VAL_OUT_8)
  __DECLARE_VAR(REAL,VAL_OUT_9)
  __DECLARE_VAR(REAL,VAL_OUT_10)
  __DECLARE_VAR(REAL,VAL_OUT_11)
  __DECLARE_VAR(DATATYPE0,VAL_IN)
  SOURCEFROMFILECSV SOURCEFROMFILECSV0;
  GET_VALUE_CSV GET_VALUE_CSV0;
  GET_VALUE_CSV GET_VALUE_CSV1;
  SET_VALUE_CSV SET_VALUE_CSV0;
  SET_VALUE_CSV SET_VALUE_CSV1;
  SET_VALUE_CSV SET_VALUE_CSV2;
  __DECLARE_VAR(REAL,ADD9_OUT)

} TESTCSV_V_2;

void TESTCSV_V_2_init__(TESTCSV_V_2 *data__, BOOL retain);
// Code part
void TESTCSV_V_2_body__(TESTCSV_V_2 *data__);
#endif //__POUS_H
