#!/usr/bin/env python
# -*- coding: utf-8 -*-
## Code generated by Beremiz python mixin confnode
##

## Code for PLC global variable access
from targets.typemapping import TypeTranslator
import ctypes
_pythonGlobalsDesc = []
__ext_name__ = "python"
PLCGlobalsDesc.append(( "python" , _pythonGlobalsDesc ))
_Test_Python_Var_ctype, _Test_Python_Var_unpack, _Test_Python_Var_pack = \
    TypeTranslator["INT"]
_PySafeGetPLCGlob_Test_Python_Var = PLCBinary.__SafeGetPLCGlob_Test_Python_Var
_PySafeGetPLCGlob_Test_Python_Var.restype = None
_PySafeGetPLCGlob_Test_Python_Var.argtypes = [ctypes.POINTER(_Test_Python_Var_ctype)]
_PySafeSetPLCGlob_Test_Python_Var = PLCBinary.__SafeSetPLCGlob_Test_Python_Var
_PySafeSetPLCGlob_Test_Python_Var.restype = None
_PySafeSetPLCGlob_Test_Python_Var.argtypes = [ctypes.POINTER(_Test_Python_Var_ctype)]
_pythonGlobalsDesc.append((
    "Test_Python_Var",
    "INT",
    u'',
    None,
    u''))

_Second_Python_Var_ctype, _Second_Python_Var_unpack, _Second_Python_Var_pack = \
    TypeTranslator["INT"]
_PySafeGetPLCGlob_Second_Python_Var = PLCBinary.__SafeGetPLCGlob_Second_Python_Var
_PySafeGetPLCGlob_Second_Python_Var.restype = None
_PySafeGetPLCGlob_Second_Python_Var.argtypes = [ctypes.POINTER(_Second_Python_Var_ctype)]
_PySafeSetPLCGlob_Second_Python_Var = PLCBinary.__SafeSetPLCGlob_Second_Python_Var
_PySafeSetPLCGlob_Second_Python_Var.restype = None
_PySafeSetPLCGlob_Second_Python_Var.argtypes = [ctypes.POINTER(_Second_Python_Var_ctype)]
_pythonGlobalsDesc.append((
    "Second_Python_Var",
    "INT",
    u'',
    None,
    u''))


## User code in "global" scope


import time,sys,ctypes
Python_to_C_Call = PLCBinary.Python_to_C_Call
Python_to_C_Call.restype = ctypes.c_int
Python_to_C_Call.argtypes = [ctypes.c_int, ctypes.POINTER(ctypes.c_int)]

def MyPythonFunc(arg):
    i = ctypes.c_int()
    if(Python_to_C_Call(arg, i)):
        res = i.value
        print "toC:", arg, "from C:", res, "FBID:", FBID
    else:
        print "Failed Python_to_C_Call failed"
        res = None
    print "Python read PLC global :",PLCGlobals.Test_Python_Var
    PLCGlobals.Second_Python_Var = 789
    sys.stdout.flush()
    return res

async_error_test_code = """
def badaboom():
    tuple()[0]

import wx
def badaboomwx():
    wx.CallAfter(badaboom)

from threading import Timer
a = Timer(3, badaboom)
a.start()

b = Timer(6, badaboomwx)
b.start()
"""



## Beremiz python runtime calls
def _runtime_0_init():
    global x, y
    x = 2
    y = 5
    print "py_runtime init:", x, ",", y

def _runtime_0_cleanup():
    print "py_runtime cleanup"

def _runtime_0_start():
    global x, y
    print "py_runtime start", x * x + y * y

def _runtime_0_stop():
    print "py_runtime stop"



del __ext_name__

